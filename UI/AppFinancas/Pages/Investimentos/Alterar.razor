@page "/investimento/alterar/{id:int}"
@inject NavigationManager Navigation

@rendermode InteractiveServer

<PageTitle>Investimento</PageTitle>

<h1>Alterar investimento</h1>

@if (mensagem != string.Empty)
{
    <label class="text text-danger">@mensagem</label>
}



<EditForm Model="@investimentoModel" OnValidSubmit="Gravar">
    <DataAnnotationsValidator />
    @* <ValidationSummary/> *@

    <div class="mb-3">
        <label class="form-label">Nome</label>
        <InputText @bind-Value="investimentoModel.Nome" class="form-control"></InputText>
        <ValidationMessage For="@(() => investimentoModel.Nome)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Vencimento</label>
        <InputDate @bind-Value="investimentoModel.Vencimento" class="form-control"></InputDate>
    </div>

    <div class="mb-3">
        <label class="form-label">Categoria</label>
        <InputSelect @bind-Value="investimentoModel.Categoria" class="form-control">
            @foreach (var categoria in ListaCategorias)
            {
                <option value="@categoria.Value">
                    @categoria.Key
                </option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Risco</label>
        <InputSelect @bind-Value="investimentoModel.Risco" class="form-control">
            @foreach (var risco in ListaRisco)
            {
                <option value="@risco.Value">
                    @risco.Key
                </option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Gravar</button>
    <a href="/investimento" class="btn btn-default">Cancelar</a>
</EditForm>

@* <p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button> *@

@code {

    /// <summary>
    /// Investimento que está sendo alterado
    /// </summary>
    public InvestimentoModel investimentoModel { get; set; } = new();

    /// <summary>
    /// Ido do investimento a ser alterado
    /// </summary>
    [Parameter]
    public int Id { get; set; }

    /// <summary>
    /// Mensagem de erro a ser exibida na tela
    /// </summary>
    public string mensagem { get; set; } = "";

    /// <summary>
    /// Lista auxiliar de categorias
    /// </summary>
    public Dictionary<string, string> ListaCategorias { get; set; } = new Dictionary<string, string>();

    /// <summary>
    /// Lista auxiliar de risco
    /// </summary>
    public Dictionary<string, string> ListaRisco { get; set; } = new Dictionary<string, string>();


    /// <summary>
    /// Método que é disparado todas vez que atela é carregada
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        ListaCategorias.Add("Renda Fixa", "1");
        ListaCategorias.Add("Renda Variável", "2");
        ListaCategorias.Add("Cambial", "3");
        ListaCategorias.Add("Criptomoeda", "4");
        ListaCategorias.Add("Multimercado", "5");

        ListaRisco.Add("Baixo", "1");
        ListaRisco.Add("Médio", "2");
        ListaRisco.Add("Alto", "3");

        mensagem = "";
        RequisicaoLoginModel model = new RequisicaoLoginModel() { Login = "rsinfo", Senha = "senha123" };
        var x = UsuarioService.ObterToken(model);
        RetornoBaseModel retornoService = await UsuarioService.ObterToken(model);
        string token = "";
        if (retornoService.Codigo != ApiFinancas.Enums.CodigosRetornoEnum.Sucesso)
        {
            mensagem = retornoService.Mensagem;
        }
        else
        {
            ///Limpando a mensagem
            token = retornoService.Mensagem;
            mensagem = "";
        }

        RetornoEntidadeModel<InvestimentoModel> retornoApi = await InvestimentoService.ObterInvestimento(token, Id);

        if (retornoApi.Codigo != ApiFinancas.Enums.CodigosRetornoEnum.Sucesso)
        {
            mensagem = retornoService.Mensagem;
            return;
        }

        investimentoModel = retornoApi.Entidade;
    }

    public async Task Gravar()
    {

        mensagem = "";
        RequisicaoLoginModel model = new RequisicaoLoginModel() { Login = "rsinfo", Senha = "senha123" };
        var x = UsuarioService.ObterToken(model);
        RetornoBaseModel retornoService = await UsuarioService.ObterToken(model);
        string token = "";
        if (retornoService.Codigo != ApiFinancas.Enums.CodigosRetornoEnum.Sucesso)
        {
            mensagem = retornoService.Mensagem;
        }
        else
        {
            ///Limpando a mensagem
            token = retornoService.Mensagem;
            mensagem = "";
        }

        RetornoEntidadeModel<InvestimentoModel> retornoInclusao = await InvestimentoService.IncluirOuAlterarInvestimento(token, investimentoModel, flagInclusao:false);

        if (retornoInclusao.Codigo != ApiFinancas.Enums.CodigosRetornoEnum.Sucesso)
        {
            mensagem = retornoService.Mensagem;
            return;
        }

        Navigation.NavigateTo("/investimento");

    }

    // private int currentCount = 0;

    // private void IncrementCount()
    // {
    //     currentCount++;
    // }
}
