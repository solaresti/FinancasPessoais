@page "/MovimentacaoInvestimento/incluir"
@using ApiFinancas.Models
@using AppFinancas.Models
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>Lançamentos</PageTitle>

<h2>Novo lançamento</h2>

@if (mensagem != string.Empty)
{
    <label class="text text-danger">@mensagem</label>
}



<EditForm Model="@lancamentoModel" OnValidSubmit="Gravar">
    <DataAnnotationsValidator />
    @* <ValidationSummary/> *@


    <div class="mb-3">
        <label class="form-label">Valor</label>
        <InputNumber @bind-Value="lancamentoModel.Valor" class="form-control"></InputNumber>
        <ValidationMessage For="@(() => lancamentoModel.Valor)" />

    </div>
    <div class="mb-3">
        <label class="form-label">Investimento</label>
        <InputSelect @bind-Value="lancamentoModel.IdInvestimento" class="form-control">
            @foreach (var investimento in ListaInvestimentos)
            {
                <option value="@investimento.Id">
                    @investimento.Nome
                </option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Meta</label>
        <InputSelect @bind-Value="lancamentoModel.IdMeta" class="form-control">
            @foreach (var meta in ListaMetas)
            {
                <option value="@meta.Id">
                    @meta.Nome
                </option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Descrição</label>
        <InputText @bind-Value="lancamentoModel.Descritivo" class="form-control"></InputText>
        <ValidationMessage For="@(() => lancamentoModel.Descritivo)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Data</label>
        <InputDate @bind-Value="lancamentoModel.Data" class="form-control"></InputDate>
    </div>




    <button type="submit" class="btn btn-primary">Gravar</button>
    <a onclick="history.back()" class="btn btn-default">Cancelar</a>
</EditForm>


@code {

    /// <summary>
    /// Movimentação que está sendo incluída
    /// </summary>
    public MovimentacaoInvestimentoModel lancamentoModel { get; set; } = new() { Data = DateTime.Today };

    /// <summary>
    /// Lista de investimentos disponíveis
    /// </summary>
    public List<InvestimentoModel> ListaInvestimentos = new();

    /// <summary>
    /// Lista de metas disponíveis
    /// </summary>
    public List<MetaModel> ListaMetas = new();

    /// <summary>
    /// Mensagem de erro a ser exibida para o usuário, se necessário
    /// </summary>
    public string mensagem { get; set; }


    protected override async Task OnInitializedAsync()
    {
        RequisicaoLoginModel model = new RequisicaoLoginModel() { Login = "rsinfo", Senha = "senha123" };
        var x = UsuarioService.ObterToken(model);
        RetornoBaseModel retornoService = await UsuarioService.ObterToken(model);
        string token = "";

        if (retornoService.Codigo != ApiFinancas.Enums.CodigosRetornoEnum.Sucesso)
        {
            mensagem = retornoService.Mensagem;
            return;
        }
        else
        {
            ///Limpando a mensagem
            token = retornoService.Mensagem;
            mensagem = "";
        }

        // Obtendo a lista de metas
        RetornoListaEntidadesModel<MetaModel> retornoApiMetas = await MetaService.ObterLista(token);

        if (retornoApiMetas.Codigo == ApiFinancas.Enums.CodigosRetornoEnum.Sucesso)
        {
            ListaMetas = retornoApiMetas.ListaEntidades;
        }
        else
        {
            mensagem = retornoApiMetas.Mensagem;
            return;
        }

        // Obtendo a lista de investimentos
        RetornoListaEntidadesModel<InvestimentoModel> retornoApiInvestimentos = await InvestimentoService.ObterLista(token);
        if (retornoApiInvestimentos.Codigo == ApiFinancas.Enums.CodigosRetornoEnum.Sucesso)
        {
            ListaInvestimentos = retornoApiInvestimentos.ListaEntidades;
        }
        else
        {
            mensagem = retornoApiInvestimentos.Mensagem;
            return;
        }

    }

    public async Task Gravar()
    {

        mensagem = "";
        RequisicaoLoginModel model = new RequisicaoLoginModel() { Login = "rsinfo", Senha = "senha123" };
        var x = UsuarioService.ObterToken(model);
        RetornoBaseModel retornoService = await UsuarioService.ObterToken(model);
        string token = "";
        if (retornoService.Codigo != ApiFinancas.Enums.CodigosRetornoEnum.Sucesso)
        {
            mensagem = retornoService.Mensagem;
            return;
        }
        else
        {
            ///Limpando a mensagem
            token = retornoService.Mensagem;
            mensagem = "";
        }


        // Gravando as alterações
        RetornoEntidadeModel<MovimentacaoInvestimentoModel> retornoInclusao = await MovimentacaoInvestimentoService.IncluirOuAlterarLancamento(token, lancamentoModel, flagInclusao: true);

        if (retornoInclusao.Codigo != ApiFinancas.Enums.CodigosRetornoEnum.Sucesso)
        {
            mensagem = retornoInclusao.Mensagem;
            return;
        }

        // Navigation.NavigateTo("/MovimentacaoInvestimento");

        await GoBack();

    }

    // Go back in browser using Javascript on a Razor Page
    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    // private int currentCount = 0;

    // private void IncrementCount()
    // {
    //     currentCount++;
    // }
}
